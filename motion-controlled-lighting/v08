/**
 *  Motion Sensor Lights Demo
 *
 *  Copyright 2015 Matthew Salvatore
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Motion Controlled Lights Demo",
    namespace: "msalvatore",
    author: "Matthew Salvatore",
    description: "Testing out integrating motion sensors with light switches",
    category: "My Apps",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png")

preferences {
	page(name: "SelectOptions")
}

def SelectOptions() {
	dynamicPage(name: "SelectOptions", title: "Select switches and motion sensors", nextPage: "SelectMotions", uninstall: true) {

		section {
			input "switches", "capability.switch", title: "Choose switches:", required: true, multiple: true
		}
    
		section {
			input "motions", "capability.motionSensor", title: "Choose motion sensors:", required: true, multiple: true
		}
		section {
			label title: "Assign a name:", required: false
		}

	}
} 

def installed() {
	initialize()
}

def updated() {
	log.debug 'updating..'
	unsubscribe()
	initialize()
}

def initialize() {
	subscribe(motions, "motion.active", handleMotionActiveEvent)
	subscribe(motions, "motion.inactive", handleMotionInactiveEvent)
}

def exerciseWhileLoop() {
    def attempt = 1
	while ( attempt <= 10 ) {
    	log.warn "Just playing around in a while loop! Loop #$attempt out of 10."
        attempt++
        pause( 100 )
   	}
}

def handleMotionActiveEvent(evt) {
	exerciseWhileLoop()
	def message = 'The motion.active event handler has been called. Time to turn on the lights!'
	log.warn message
    sendPush( message )
    turnOnSwitchesWithPolling( 5, 1000 )
}

/**
 * Turns on light switches and checks to ensure that the switches change to the desired state as expected.
 * @param attempts how many attempts to try before giving up.
 * @param delayMillis how many milliseconds to wait in between attempts.
 */
def turnOnSwitchesWithPolling( int attempts, int delayMillis ) {
	def attempt = 0
	while ( !everySwitchOn() && attempt < attempts ) {
    	attempt++
    	log.warn "Attempt $attempt: Sending commands to turn off the lights."
    	switches.on()
        pause( delayMillis )
    }
    if( everySwitchOn() ) {
    	log.warn "Success! After $attempt attempt(s), every switch is now reporting that it is in a state of 'on'."
    } else {
    	log.error "After $attempts attempts to turn on lights, 1 or more switches is still not reporting that it's in a state of 'on'. Giving up."
    }
}

/**
 * Returns true if all switches are on, false otherwise.
 */
def everySwitchOn() {
	log.warn "About to check if all ${switches.size()} lights are on"
	switches.every {
    	log.warn "Switch with name '$it' is reporting a state of '$it.currentSwitch'"
    	"on" == it.currentSwitch
    }
}

def handleMotionInactiveEvent(evt) {
	exerciseWhileLoop()
	def message = 'The motion.inactive event handler has been called. Time to turn off the lights!'
    log.warn message
	sendPush( message )
   	turnOffSwitchesWithPolling( 5, 1000 )
}

/**
 * Turns off light switches and checks to ensure that the switches change to the desired state as expected.
 * @param attempts how many attempts to try before giving up.
 * @param delayMillis how many milliseconds to wait in between attempts.
 */
def turnOffSwitchesWithPolling( int attempts, int delayMillis ) {
	def attempt = 0
	while ( !everySwitchOff() && attempt < attempts ) {
    	attempt++
    	log.warn "Attempt $attempt: Sending commands to turn on the lights."
    	switches.off()
        pause( delayMillis )
    }
    if( everySwitchOff() ) {
    	log.warn "Success! After $attempt attempt(s), every switch is now reporting that it is in a state of 'off'."
    } else {
    	log.error "After $attempts attempt(s) to turn off lights, 1 or more switches is still not reporting that it's in a state of 'on'. Giving up."
    }
}

/**
 * Returns true if all switches are off, false otherwise.
 */
def everySwitchOff() {
	log.warn "About to check if all ${switches.size()} lights are off"
	switches.every {
    	log.warn "Switch with name '$it' is reporting a state of '$it.currentSwitch'"
    	"off" == it.currentSwitch
    }
}

