/**
 *  Motion Sensor Lights Demo
 *
 *  Copyright 2015 Matthew Salvatore
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Motion Controlled Lights Demo",
    namespace: "msalvatore",
    author: "Matthew Salvatore",
    description: "Testing out integrating motion sensors with light switches",
    category: "My Apps",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png")



preferences {
	page(name: "SelectOptions")
}

def SelectOptions() {
	dynamicPage(name: "SelectOptions", title: "Select switches and motion sensors", nextPage: "SelectMotions", uninstall: true) {

		section {
			input "switches", "capability.switch", title: "Choose switches:", required: true, multiple: true
		}
    
		section {
			input "motions", "capability.motionSensor", title: "Choose motion sensors:", required: true, multiple: true
		}
		section {
			label title: "Assign a name:", required: false
		}

	}
} 

def installed() {
	initialize()
}

def updated() {
	unsubscribe()
	initialize()
}

def initialize() {
	subscribe(motions, "motion.active", handleMotionActiveEvent)
	subscribe(motions, "motion.inactive", handleMotionInactiveEvent)
}

def handleMotionActiveEvent(evt) {
	def message = "The motion.active event handler has been called. Sending commands now to turn lights on."
	log.warn message
    sendPush(message)
    turnOnSwitchesWithPolling( 5, 1000 )
}

/**
 * Turns on light switches and checks to ensure that the switches change to the desired state as expected.
 * @param attempts how many attempts to try before giving up.
 * @param delayMillis how many milliseconds to wait in between attempts.
 */
def turnOnSwitchesWithPolling( int attempts, int delayMillis ) {
	def attempt = 1
	while ( anySwitchesOff() && attempt <= attempts ) {
    	log.warn "Sending commands to turn lights on. Attempt: $attempt"
    	switches.on()
        attempt++
        pause( delayMillis )
    }
    if( anySwitchesOff() ) {
    	log.error "After $attempts attempts to turn on lights, 1 or more switches are still in an off state. Giving up."
    }
}

/**
 * Returns true if any of the light switches are off, false otherwise.
 */
def anySwitchesOff() {
	switches.any { "off" == it.currentSwitch }
}

def handleMotionInactiveEvent(evt) {
	def message = "The motion.inactive event handler has been called. Sending commands now to turn lights off."
    log.warn message
	sendPush(message)
   	turnOffSwitchesWithPolling( 5, 1000 )
}

/**
 * Turns off light switches and checks to ensure that the switches change to the desired state as expected.
 * @param attempts how many attempts to try before giving up.
 * @param delayMillis how many milliseconds to wait in between attempts.
 */
def turnOffSwitchesWithPolling( int attempts, int delayMillis ) {
	def attempt = 1
	while ( anySwitchesOn() && attempt <= attempts ) {
    	log.warn "Sending commands to turn lights off. Attempt: $attempt"
    	switches.off()
        attempt++
        pause( delayMillis )
    }
    if( anySwitchesOn() ) {
    	log.error "After $attempts attempts to turn off lights, 1 or more switches are still in an on state. Giving up."
    }
}

/**
 * Returns true if any of the light switches are on, false otherwise.
 */
def anySwitchesOn() {
	switches.any { "on" == it.currentSwitch }
}

